/*
Zinc Search engine API

Zinc Search engine API documents https://docs.zincsearch.com

API version: 0.2.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// V1QueryHighlight struct for V1QueryHighlight
type V1QueryHighlight struct {
	Fields []string `json:"fields,omitempty"`
	Style *string `json:"style,omitempty"`
}

// NewV1QueryHighlight instantiates a new V1QueryHighlight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1QueryHighlight() *V1QueryHighlight {
	this := V1QueryHighlight{}
	return &this
}

// NewV1QueryHighlightWithDefaults instantiates a new V1QueryHighlight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1QueryHighlightWithDefaults() *V1QueryHighlight {
	this := V1QueryHighlight{}
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *V1QueryHighlight) GetFields() []string {
	if o == nil || o.Fields == nil {
		var ret []string
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1QueryHighlight) GetFieldsOk() ([]string, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *V1QueryHighlight) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []string and assigns it to the Fields field.
func (o *V1QueryHighlight) SetFields(v []string) {
	o.Fields = v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *V1QueryHighlight) GetStyle() string {
	if o == nil || o.Style == nil {
		var ret string
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1QueryHighlight) GetStyleOk() (*string, bool) {
	if o == nil || o.Style == nil {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *V1QueryHighlight) HasStyle() bool {
	if o != nil && o.Style != nil {
		return true
	}

	return false
}

// SetStyle gets a reference to the given string and assigns it to the Style field.
func (o *V1QueryHighlight) SetStyle(v string) {
	o.Style = &v
}

func (o V1QueryHighlight) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.Style != nil {
		toSerialize["style"] = o.Style
	}
	return json.Marshal(toSerialize)
}

type NullableV1QueryHighlight struct {
	value *V1QueryHighlight
	isSet bool
}

func (v NullableV1QueryHighlight) Get() *V1QueryHighlight {
	return v.value
}

func (v *NullableV1QueryHighlight) Set(val *V1QueryHighlight) {
	v.value = val
	v.isSet = true
}

func (v NullableV1QueryHighlight) IsSet() bool {
	return v.isSet
}

func (v *NullableV1QueryHighlight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1QueryHighlight(val *V1QueryHighlight) *NullableV1QueryHighlight {
	return &NullableV1QueryHighlight{value: val, isSet: true}
}

func (v NullableV1QueryHighlight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1QueryHighlight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


