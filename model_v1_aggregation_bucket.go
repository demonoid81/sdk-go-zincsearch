/*
Zinc Search engine API

Zinc Search engine API documents https://docs.zincsearch.com

API version: 0.2.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// V1AggregationBucket struct for V1AggregationBucket
type V1AggregationBucket struct {
	Aggregations *map[string]V1AggregationResponse `json:"aggregations,omitempty"`
	DocCount *int32 `json:"doc_count,omitempty"`
	Key *string `json:"key,omitempty"`
}

// NewV1AggregationBucket instantiates a new V1AggregationBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1AggregationBucket() *V1AggregationBucket {
	this := V1AggregationBucket{}
	return &this
}

// NewV1AggregationBucketWithDefaults instantiates a new V1AggregationBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1AggregationBucketWithDefaults() *V1AggregationBucket {
	this := V1AggregationBucket{}
	return &this
}

// GetAggregations returns the Aggregations field value if set, zero value otherwise.
func (o *V1AggregationBucket) GetAggregations() map[string]V1AggregationResponse {
	if o == nil || o.Aggregations == nil {
		var ret map[string]V1AggregationResponse
		return ret
	}
	return *o.Aggregations
}

// GetAggregationsOk returns a tuple with the Aggregations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AggregationBucket) GetAggregationsOk() (*map[string]V1AggregationResponse, bool) {
	if o == nil || o.Aggregations == nil {
		return nil, false
	}
	return o.Aggregations, true
}

// HasAggregations returns a boolean if a field has been set.
func (o *V1AggregationBucket) HasAggregations() bool {
	if o != nil && o.Aggregations != nil {
		return true
	}

	return false
}

// SetAggregations gets a reference to the given map[string]V1AggregationResponse and assigns it to the Aggregations field.
func (o *V1AggregationBucket) SetAggregations(v map[string]V1AggregationResponse) {
	o.Aggregations = &v
}

// GetDocCount returns the DocCount field value if set, zero value otherwise.
func (o *V1AggregationBucket) GetDocCount() int32 {
	if o == nil || o.DocCount == nil {
		var ret int32
		return ret
	}
	return *o.DocCount
}

// GetDocCountOk returns a tuple with the DocCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AggregationBucket) GetDocCountOk() (*int32, bool) {
	if o == nil || o.DocCount == nil {
		return nil, false
	}
	return o.DocCount, true
}

// HasDocCount returns a boolean if a field has been set.
func (o *V1AggregationBucket) HasDocCount() bool {
	if o != nil && o.DocCount != nil {
		return true
	}

	return false
}

// SetDocCount gets a reference to the given int32 and assigns it to the DocCount field.
func (o *V1AggregationBucket) SetDocCount(v int32) {
	o.DocCount = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *V1AggregationBucket) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AggregationBucket) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *V1AggregationBucket) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *V1AggregationBucket) SetKey(v string) {
	o.Key = &v
}

func (o V1AggregationBucket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aggregations != nil {
		toSerialize["aggregations"] = o.Aggregations
	}
	if o.DocCount != nil {
		toSerialize["doc_count"] = o.DocCount
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableV1AggregationBucket struct {
	value *V1AggregationBucket
	isSet bool
}

func (v NullableV1AggregationBucket) Get() *V1AggregationBucket {
	return v.value
}

func (v *NullableV1AggregationBucket) Set(val *V1AggregationBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AggregationBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AggregationBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AggregationBucket(val *V1AggregationBucket) *NullableV1AggregationBucket {
	return &NullableV1AggregationBucket{value: val, isSet: true}
}

func (v NullableV1AggregationBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AggregationBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


