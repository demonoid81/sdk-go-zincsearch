/*
Zinc Search engine API

Zinc Search engine API documents https://docs.zincsearch.com

API version: 0.2.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// V1Total struct for V1Total
type V1Total struct {
	// Count of documents returned
	Value *int32 `json:"value,omitempty"`
}

// NewV1Total instantiates a new V1Total object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Total() *V1Total {
	this := V1Total{}
	return &this
}

// NewV1TotalWithDefaults instantiates a new V1Total object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1TotalWithDefaults() *V1Total {
	this := V1Total{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *V1Total) GetValue() int32 {
	if o == nil || o.Value == nil {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Total) GetValueOk() (*int32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *V1Total) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *V1Total) SetValue(v int32) {
	o.Value = &v
}

func (o V1Total) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableV1Total struct {
	value *V1Total
	isSet bool
}

func (v NullableV1Total) Get() *V1Total {
	return v.value
}

func (v *NullableV1Total) Set(val *V1Total) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Total) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Total) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Total(val *V1Total) *NullableV1Total {
	return &NullableV1Total{value: val, isSet: true}
}

func (v NullableV1Total) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Total) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


